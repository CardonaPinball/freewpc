#
# FSM for Twilight Zone shots
# (C) Copyright 2006 by Brian Dominy.  All Rights Reserved.
#

# Syntax:
#
# An FSM file defines one or more autonomous "state machines".  Each element of an FSM
# is a transition rule of the form
# <initial-state(s)> : <event> => <new-state>
# which says how to transition states based on events.  The event names given here
# correspond to those generated by "gencallset".
#
# For each transition, an optional block of code may be written that is executed when
# the transition occurs.  The code block may use the "throw <event>" syntax to generate
# new events.
#

#################################################################
# Recognize loop shots.
#################################################################

loopshots {
	* : start_ball => INIT
	INIT : sw_left_magnet => left_loop_started 
	INIT : sw_upper_right_magnet => right_loop_started
	INIT : sw_lower_right_magnet => right_loop_started
	left_loop_started : sw_upper_right_magnet => left_loop_made
		{
			throw shot_left_loop;
		}
	left_loop_started : sw_lower_right_magnet => left_loop_made
		{
			throw shot_left_loop;
		}
	right_loop_started : sw_left_magnet => right_loop_made
		{
			throw shot_right_loop;
		}
	left_loop_started, right_loop_started : TIME_3S => INIT
	left_loop_made, right_loop_made : TIME_1S => INIT
}

#################################################################
# Recognize skill shots.
#################################################################

skillshot {
	* : init => INIT
	INIT : enable_skill_shot => ready
	ready : sw_skill_bottom => red
	ready, red : sw_skill_center => orange
	ready, red, orange : sw_skill_top => yellow
	ready, red, orange, yellow : sw_slot_machine => missed
	{
		throw skill_shot_miss;
	}
	yellow : any_skill_switch, TIME_1S => INIT
	{
		throw skill_shot_yellow;
	}
	orange : sw_skill_bottom, TIME_1S => INIT
	{
		throw skill_shot_orange;
	}
	red : TIME_1S => INIT
	{
		throw skill_shot_red;
	}
}


#template gatedramp {
#	* : init => INIT
#	INIT : gate_switch => entered
#	{
#		throw enter_event;
#	}
#	INIT, entered : made_switch => INIT
#	{
#		throw made_event;
#	}
#	entered : timeout, gate_switch => INIT
#	{
#		throw abort_event;
#	}
#}


template always_precedes {
	* : init => INIT
	INIT, started : s1 => started
	started : s2 => INIT
	started : timeout => INIT
	INIT : s2 => INIT
	{
		throw s1;
	}
}





