# vim: set filetype=:

@deftitle FreeWPC - a framework for writing new software for real pinball machines

<^brian@oddchange.com^>

#### @firsts

<b>FREEWPC</b> is a platform for developing replacement game ROMs for
Bally/Williams pinball machines based on the WPC (Williams Pinball Controller)
chip.  It provides the foundation for building new ROMs with custom game
rules.

FreeWPC only replaces the CPU game ROM (the U6 chip), which contains all
of the game code and dot matrix text/graphics.  Sounds and
music are NOT included in this device.

The project has been in development for over a year during my spare time
and is evolving nicely.  The eventual goal is to produce a version
suitable for running in real machine.  At present, it is only being
tested in simulators such as <a href="http://www.pinmame.com">Visual Pinmame</a>.

The FreeWPC system is being developed using Twilight Zone as the target machine.
Periodically, the system is also verified to compile and run on
World Cup Soccer and Attack From Mars.  Precompiled binaries for all of these
machines are now available for download.  However, only Twilight Zone
is currently playable.


=News

!November 5,2007
Updated the <a href="/freewpc/faq.html">FAQ</a>.  Still working on
getting version 0.15 stable enough to lock down.  I haven't been
working on this much lately.


!August 18, 2007
Version 0.14 posted.  All ROMs have been rebuilt.  This is mostly a system change with
few rules changes at all to Twilight Zone.  See below for the change list.


!August 5, 2007
My day-to-day development is now done on a separate branch, to keep the trunk
more stable.  See <b>branches/brian</b> if you're interested in the bleeding
edge development, otherwise stick to the trunk.


!May 12, 2007
Version 0.13 posted.  This is a major update with many new system features.


!April 1, 2007
Version 0.12 posted.  This is a minor release with only a few visible differences,
mostly bug fixes.


!January 14, 2007
The <a href="/freewpc/faq.html">Frequently Asked Questions (FAQ)</a> about FreeWPC
is now available online.


=Features

Here's a summary of the major features presently available in FREEWPC:

==General
* It is 100% Williams-free code, written from scratch.
* It is mostly written in C using the 
<a href="/gcc6809">GCC 6809 C compiler</a>.  There is very little assembly
language, and what's there is probably all that will need to be written.
Some C code is also autogenerated from Perl scripts.
* Development can be done under Linux, or under Windows using the
<a href="http://www.cygwin.com">Cygwin</a> UNIX emulation suite.
* All generations of WPC are supported, except for alphanumeric games.  

==System Features
* Complete hardware control of switches, lamps, solenoids, and the dot matrix display.
* Mostly transparent bank switching to maximize use of ROM space
* Nonvolatile RAM management to hold adjustments and audits
* Partial control of general illumination circuits and the two varieties of sound board.
* Priority-based, display effect control (single writer)
* Priority-based, lamp effect control (multiple writers)
* Multiple fonts autogenerated from X Windows fonts via <a href="http://netpbm.sourceforge.net/doc/">netpbm</a>.
* Dot matrix transition manager, implementing several wipes and fades so far.
* Libraries and utilities for converting PGM graphics (supported by GIMP and Photoshop) into FreeWPC format.
* Test mode implementing many of the WPC test functions.
* Additional test features for browsing available fonts, effects, ball devices, and graphics.
* Generic pinball algorithms for ball tracking, ball search, and game sequence.
* Fault detection mechanisms that will trigger a reset if things go wrong.
* Simple round-robin multitasking scheduler for normal tasks with realtime functions at interrupt level.
* Self-contained, does not rely on any external libraries.  Has builtins for low-level math (including BCD format for scoring) and printf-like function for rendering text to the DMD.

==Advanced Features
* Static event publish/subscribe mechanism for efficient but modular event processing
* Machine description language for defining machine characteristics, which automatically gets translated into C code
* Finite state machine compiler that translates simple state machines into C code

==Development Environment
* Support cross-compilation to 6809 as well as native compile for x86 for simulation.
* Debug messages via WPC debug port, accessible via patch to xpinmame.  Optionally,
can divert debug messages to the WPC parallel port.
* Real-time profiling option for determining CPU utilization at interrupt time
* Inspector module for dumping RAM contents to DMD while running
* <a href="/freewpc/doxygen">Well-commented source code</a>, documented in <a href="http://www.stack.nl/~dimitri/doxygen/">doxygen</a> format
* Maintained in public <a href="http://subversion.tigris.org/">Subversion</a> repository

==Twilight Zone Features
* Basic game rules implemented, continuously being updated
* Basic drivers for magnets, gumball machine, clock, and powerball detection.

For a more in-depth explanation of some of these features, read the
<a href="/freewpc/faq.html">FAQ</a>.


=Version History

The current version is 0.14.  Download ROMs for 
<a href="/freewpc/releases/ftz0_14.zip">Twilight Zone</a>,
<a href="/freewpc/releases/fwcs0_14.zip">World Cup Soccer</a>,
and <a href="/freewpc/releases/fafm0_14.zip">Attack From Mars</a>.

Version 0.15 is already well under way, and will contain a number of
additional improvements, including support for a few more machines!

Version 0.14 contains the following changes:
* Better support for GCC 4.x, although GCC 3.4.6 is still recommended by default.
* A working malloc() function for dynamic memory needs.
* Rewrite of display effect module to use dynamic memory for each effect
* Deff retries and aborts
* Many, many test mode improvements
* Match algorithm added
* Static scheduler
* Improved right ramp and mini-playfield handling on TZ.
* Better ball tracking, ball searching, empty balls test, etc.
* DMD/Fliptronic specific codes are more isolated
* Amode starts much sooner during reset
* Smarter bit macros

Version 0.13 was a major update with many new system features, such as:
* Improved score rendering for multiplayer games
* More adjustments and audits implemented
* Improved font test
* Misc. performance enhancements
* ROM and RAM test at startup
* General illumination brightness control
* Better music effect control
* Better compressed image drawing
* Fixed some bugs with paging that caused system crashes
* Deleted LOTS of old code no longer needed
* Added some multiball modes to TZ
* Many improvements in common code for coins, tilts, autolaunchers, etc.

Note that the focus of 0.13 was all on TZ, and the other ROMs were not
tested very much.

Version 0.12 was mainly a performance release, as the code was optimized in many
places.  It also contains numerous bug fixes and several new test mode items.
A new audio module is added for managing more complex sound effects, and some
more dot matrix routines related to symbols and animation were added.  TZ game
code is essentially the same, except for much improved Powerball detection
logic.

Version 0.11 fixes many bugs relating to display/lamp effects, reverts back to a
non-timed game on TZ, and introduces the machine description file for declaring
machine characteristics in a more straightforward manner than in C code, making it
easier than ever to add support for more machines.

Version 0.10 was the first version to support native mode, and has
enhancements in the usage of nonvolatile RAM.

Version 0.09 was the first public release that
incorporates the new Twilight Zone game rules, albeit incomplete in many places.
The hope is that by providing a <i>playable</i> version, rather than
just a working test mode, that people will be more inclined to try it
out, find bugs, and be able to work on new features.

=Binary Installation (PinMAME or Visual PinMAME)

<p>You will need to copy the ROM file into your PinMAME <b>roms</b>
directory so that PinMAME can find it.  The location of this directory
depends on how you installed PinMAME.  These directories typically contain
ZIP files of the game ROM and sound ROMs; you'll need to unzip the file,
replace the game ROM, then zip it back.  Make sure to save your original
version of the ROM file for when you want to revert back to the real deal.</p>

=Source Installation

Source code is released under the <b>GNU General Public License</b>,
which means basically that you can download it and use it for free.

If you just want to browse the code, use the
<a href="/websvn/">Subversion repository browser</a>.  This requires
no additional software to be installed.

If you want
to download the code directly and you already have Subversion installed,
see the <a href="/freewpc/subversion.html">Subversion starter page</a> and
the <a href="/freewpc/build.html">build instructions</a>.

=Known Limitations

The current Preview Releases lack a lot of things; they are intended to
demonstrate only the most basic functionality.  Here are some of the
areas that need addressing:

* General illumination is implemented but there is no support for
controlling the brightness.  Note that Visual Pinball does not
show brightness levels, so this will be hard to debug outside of a
real machine.
* Only a few dot matrix transitional effects and fonts are present.
* Many of the test mode functions are still missing.
* Other than Twilight Zone, the games are not playable; most of the efforts 
have been put into the test mode and very basic functionality.  Even
Twilight Zone is not completely playable yet.


=Want to Help?

If you are interested in working on this project, please contact me
at <a href="mailto:freewpc@oddchange.com">freewpc@oddchange.com</a>.  
Developers should be familiar
with basic embedded systems programming concepts and the C programming
language.  Familiarity with 6809 assembler is <i>highly</i> recommended.
Also, knowledge of WPC pinball machines is expected, but I'm assuming
anyone interested would probably meet that requirement.

All development is currently done under the Linux operating system.
I use <a href="subversion">Subversion</a> for source control.
Developers will also need to grab my <a href="/gcc6809">GCC for 6809</a>
compiler, an assembler, and a linker.  See the 6809 pages for information
on how to download and install the compiler.

Here is a list of things to be done, roughly in order from easiest to hardest.

* Test the Twilight Zone game ROM in PinMAME, and report any bugs.
* Create machine description files for other machines
* Implement a new ruleset for an existing supported machine
* Write lamp and display effects.  Some of these can be <b>generic algorithms</b>
that apply to all machines, based on geometry rather than specific lamps.
* Work on known bugs, and features identified but not yet started
* Test a game ROM in an actual machine.
