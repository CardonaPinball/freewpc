
/* TODO Fix holding down the button */
@@class mag
@@parameter sol
@@parameter mode		/* Set to 1 if the solenoids are fliptronic powered */




@@
@@file @class.h
@@

#ifndef __@class_DRIVER_H
#define __@class_DRIVER_H

#define @SELF_MODE @mode // 1 == fliptronics, 0 == normal

/** We keep two bitarrays to track all special solenoids.
 * The 'enables' are software controlled and allow the
 * solenoids to be disabled.  The 'running' entries say
 * for each coil whether it is in its on or off phase. */
extern __fastram__ U8 @class_enables;
extern __fastram__ U8 @class_running;
#endif /* __@class_DRIVER_H */

@@
@@file @self.h
@@

#include <@class.h>

#undef INST_MASK
#define INST_MASK (1 << @instance)

#if (@SELF_MODE > 0)
	extern U8 fliptronic_powered_coil_outputs;
#endif

void @self_on (void);
void @self_off (void);

extern inline U8 @self_enabled_p (void) { return @class_enables & INST_MASK; }
extern inline U8 @self_running_p (void) { return @class_running & INST_MASK; }






@@
@@file @self.c
@@

#include <freewpc.h>
#include <@self.h>

/** We keep two bitarrays to track all special solenoids.
 * The 'enables' are software controlled and allow the
 * solenoids to be disabled.  The 'running' entries say
 * for each coil whether it is in its on or off phase. */
@@classvar __fastram__ U8 @class_enables;
@@classvar __fastram__ U8 @class_running;



/* Initialize the device */
CALLSET_ENTRY (@self, init) {
	sol_disable (@sol);
}


void @self_on (void){
	sol_enable (@sol);
	@class_running |= INST_MASK;
}




void @self_off (){
	sol_disable (@sol);
	@class_running &= ~INST_MASK;
}







/* Enable the device at start ball */
CALLSET_ENTRY (@self, start_ball) {
	sol_disable (@sol);
	@class_enables |= (1 << @instance);
}



/* Disable the device at end ball/tilt */
CALLSET_ENTRY (@self, end_ball, tilt) {
	sol_disable (@sol);
	@class_enables &= ~(1 << @instance);
}

/* vim: set filetype=c: */
