#!/usr/bin/perl
#
# gencallset
#
# Scan all source files recursively and grep them for
# defines that match a particular pattern.  For each
# one, treat as a function call and generate a call to it.

my @dirs = ("kernel", "tz", "fonts");

my $firstval = 1;



my @functions = ();

my %functionhash;

my $nextval = $firstval;

while ($arg = shift)
{
}

foreach $dir (@dirs) {
	my @files = split /\n+/, 
		`cd $dir && find . -name "*.c" -or -name "*.h"`;
	foreach $file (@files) {
		push @srclist, "$dir/" . $file;
	}
}

foreach $src (@srclist) {
	open FH, $src;
	while (<FH>) {
		chomp;
		if (/CALLSET_ENTRY\((.*)\)/) {
			my $callset_entry_args = $1;
			my ($module, $set) = split /, */, $callset_entry_args;
			next if (!defined $module or !defined $set);
			# print "Found $module + $set\n";
			if (!defined $functionhash{$set}) {
				$functionhash{$set} = "";
			}
			$functionhash{$set} .= "$module ";
		}
	}
	close FH;
}

foreach $set (keys %functionhash) {
	open FH, ">callset/$set.callset";
	my @modules = split " ", $functionhash{$set};
	foreach $module (@modules) {
		print FH "extern void ${module}_$set (void);\n";
		print FH "${module}_$set ();\n";
	}
	close FH;
}

