/***********************************************************************
 * Copyright 2011 by Brian Dominy <brian@oddchange.com>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 *
 *
 * Similar to motorbank, but adds testing and more specifaclly designed 
 * for a device that would stay down most of the time and only raise
 * to lift a ball - like the elevator on demolition man
 *
 */

@@class duty

@@parameter sol
@@parameter up_sw_event
@@parameter down_sw_event
@@parameter initial_position



@@
@@file @self.h
@@

/***********************************************************************
 * @self.h
 ***********************************************************************/

#include <freewpc.h>

enum @self_state {
	MOTOR_BANK_INIT,
	MOTOR_BANK_UP,
	MOTOR_BANK_DOWN,
	MOTOR_BANK_OFF,
};

extern enum @self_state @self_state;

void @self_stop (void);
void @self_move_up (void);
void @self_move_down (void);
void @self_move_bump (void);
void @self_move (void);
void @self_move_task_timer (void);






@@
@@file @self.c
@@
/***********************************************************************
 * @self.c
 ***********************************************************************/

#include <freewpc.h>
#include "@self.h"

enum @self_state @self_state;

__boolean @self_timer;


void @self_move_monitor (void) {
	sol_enable (@sol);
	task_sleep_sec (4);
	sol_disable (@sol);
	task_exit ();
}



void @self_stop (void) {
	dbprintf ("Stopping\n");
	task_kill_gid (GID_@SELF_MONITOR);
	task_kill_gid (GID_@SELF_MOVE);
	sol_disable (@sol);
}


static void @self_move_task (void) {
	//start timer
	@self_move_task_timer();
	do {
		sol_enable (@sol);
	} while (	!switch_poll_logical (@down_sw_event)  
	         && !@self_timer);//or time = 4 sec
	sol_disable (@sol);
	task_exit ();
}

void @self_move_task_timer (void) {
	task_sleep_sec (4);
	@self_timer = TRUE;
}


void @self_move(void) {
	@self_timer = FALSE;
	task_create_gid1 (GID_@SELF_MOVE, @self_move_task);
}






void @self_move_up (void) {
	if (@self_state != MOTOR_BANK_UP) {
		@self_state = MOTOR_BANK_UP;
		task_recreate_gid (GID_@SELF_MONITOR, @self_move_monitor);
	}
}




void @self_move_down (void) {
	if (@self_state != MOTOR_BANK_DOWN) {
		@self_state = MOTOR_BANK_DOWN;
		task_recreate_gid (GID_@SELF_MONITOR, @self_move_monitor);
	}
}


CALLSET_ENTRY (@self, @up_sw_event) {
	if (@self_state == MOTOR_BANK_UP)
		@self_stop ();
}



CALLSET_ENTRY (@self, @down_sw_event) {
	if (@self_state == MOTOR_BANK_DOWN)
		@self_stop ();
}


//THIS IS ONLY USED FOR TEST MODE
void @self_move_bump (void) {
	sol_enable (@sol);
	task_sleep (TIME_33MS);
	sol_disable (@sol);
}



CALLSET_ENTRY (@self, tilt, test_start) {
	@self_stop ();
}



CALLSET_ENTRY (@self, amode_start) {
	@self_state = MOTOR_BANK_INIT;
	if (@initial_position == MOTOR_BANK_DOWN) 	@self_move_down();
	else 										@self_move_up();
}

















/* vim: set filetype=c: */

@@
@@file @self_test.c
@@

 
/***********************************************************************
 * @self test:
 ***********************************************************************/
 

#include <freewpc.h>
#include <window.h>
#include <test.h>
#include "@self.h"

// FIXME - font_render_string_right vertically offsets the text by 1 pixel (downwards)
// When this is removed removed all references to FR_WORKAROUND
#define FRSR_WORKAROUND 1

enum {
	FIRST_TEST = 0,
	RUN = FIRST_TEST,
	UP,
	DOWN,
	STOP,
	LAST_TEST = STOP
} @self_test_command;



char *@self_test_short_names[] = {
	"RUN",
	"UP",
	"DOWN",
	"STOP"
};



void @self_test_init (void)
{
	@self_test_command = RUN;
}



void @self_draw_test_title(void) {
	font_render_string_center (&font_mono5, 64, 2, "@SELF TEST");
	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 5);
}



void @self_test_draw (void) {
	dmd_alloc_low_clean ();
	@self_draw_test_title();
	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 25);

	//display status of upper limit switch
	sprintf ("@up_sw_event");
	font_render_string_center (&font_var5, 64, 13, sprintf_buffer);
	if (switch_poll_logical (@up_sw_event) ) sprintf ("X");
	 else sprintf ("O"); 
	font_render_string_center (&font_var5, 20, 13, sprintf_buffer);

	//display status of lower limit switch
	sprintf ("@down_sw_event");
	font_render_string_center (&font_var5, 64, 20, sprintf_buffer);
	if (switch_poll_logical (@down_sw_event) ) sprintf ("X");
	 else sprintf ("O"); 
	font_render_string_center (&font_var5, 20, 20, sprintf_buffer);

	//name of currently running test
	sprintf(@self_test_short_names[@self_test_command]);
	font_render_string_left (&font_mono5, 0, 27, sprintf_buffer);

	dmd_show_low ();
}




void @self_test_thread (void) {
	for (;;) {
		task_sleep (TIME_33MS);
		@self_test_draw ();
	}
}


//up test button pressed
void @self_test_up (void) {
	if (@self_test_command < LAST_TEST)
		@self_test_command++;
}



//down test button pressed
void @self_test_down (void) {
	if (@self_test_command > FIRST_TEST)
		@self_test_command--;
}


//escape test button pressed
void @self_test_escape (void) {
	// stop everything
	@self_stop();
	window_pop();
}


//enter test button pressed
void @self_test_enter (void) {
	sound_send (SND_TEST_ENTER);
  	switch (@self_test_command) {
  		case RUN:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_move_bump();
			@self_test_command = RUN;
  		break;
  		case UP:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_move_up();
			@self_test_command = DOWN;
  		break;
  		case DOWN:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_move_down();
			@self_test_command = STOP;
  		break;
  	
  		case STOP:
			dbprintf ("@self_test_enter: starting 'close'\n");
			@self_stop();
			@self_test_command = RUN;
  		break;
  	}
}



struct window_ops @self_test_window = {
	DEFAULT_WINDOW,
	.init = @self_test_init,
	.draw = @self_test_draw,
	.up = @self_test_up,
	.down = @self_test_down,
	.enter = @self_test_enter,
	.escape = @self_test_escape,
	.thread = @self_test_thread,
};



struct menu @self_test_item = {
	.name = "@SELF TEST", // needs @SELF for uppercase version of 'self' as test menu font doesn't have lower-case letters.
	.flags = M_ITEM,
	.var = { .subwindow = { &@self_test_window, NULL } },
};




