/*
 * Copyright 2011 by Brian Dominy <brian@oddchange.com>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * Drivers for an up/down motor bank
 * based on motorbank.ct
 * this code adds test menu and option of starting in up or down position on init
 * TODO:
 * - Handle one broken up/down switch
 * - Timeout if we don't find our target
 */

@@class duty

@@parameter sol
@@parameter up_sw_event
@@parameter down_sw_event
@@parameter initial_position



@@
@@file @self.h
@@

#include <freewpc.h>

enum @self_state {
	MOTOR_BANK_INIT,
	MOTOR_BANK_UP,
	MOTOR_BANK_DOWN,
};

extern enum @self_state @self_state;

void @self_stop (void);
void @self_move_up (void);
void @self_move_down (void);



@@
@@file @self.c
@@

#include <freewpc.h>
#include "@self.h"

enum @self_state @self_state;

void @self_move_monitor (void)
{
	sol_enable (@sol);
	task_sleep_sec (4);
	sol_disable (@sol);
	task_exit ();
}



void @self_stop (void)
{
	dbprintf ("Stopping\n");
	task_kill_gid (GID_@self_MONITOR);
	sol_disable (@sol);
}



void @self_move_up (void)
{
	if (@self_state != MOTOR_BANK_UP)
	{
		@self_state = MOTOR_BANK_UP;
		task_recreate_gid (GID_@self_MONITOR, @self_move_monitor);
	}
}




void @self_move_down (void)
{
	if (@self_state != MOTOR_BANK_DOWN)
	{
		@self_state = MOTOR_BANK_DOWN;
		task_recreate_gid (GID_@self_MONITOR, @self_move_monitor);
	}
}



CALLSET_ENTRY (@self, @up_sw_event)
{
	if (@self_state == MOTOR_BANK_UP)
		@self_stop ();
}



CALLSET_ENTRY (@self, @down_sw_event)
{
	if (@self_state == MOTOR_BANK_DOWN)
		@self_stop ();
}



CALLSET_ENTRY (@self, tilt, test_start)
{
	@self_stop ();
}



CALLSET_ENTRY (@self, amode_start)
{
	@self_state = MOTOR_BANK_INIT;
	if (@initial_position == MOTOR_BANK_DOWN) 	@self_move_down();
	else 										@self_move_up();
}



/* vim: set filetype=c: */

@@
@@file @self_test.c
@@

/*
 * Copyright 2010 by Dominic Clifton <me@dominicclifton.name>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/* @self test:
 */

#include <freewpc.h>
#include <window.h>
#include <test.h>
#include "@self.h"

// FIXME - font_render_string_right vertically offsets the text by 1 pixel (downwards)
// When this is removed removed all references to FR_WORKAROUND
#define FRSR_WORKAROUND 1

enum {
	FIRST_TEST = 0,
	UP = FIRST_TEST,
	DOWN,
	STOP,
	LAST_TEST = STOP
} @self_test_command;



char *@self_test_short_names[] = {
	"UP",
	"DOWN",
	"STOP"
};



void @self_test_init (void)
{
	@self_test_command = UP;
}



void @self_draw_test_title(void) {
	font_render_string_center (&font_mono5, 64, 2, "MOTORBANK TEST");
	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 5);
}



void @self_test_draw (void)
{
	dmd_alloc_low_clean ();
	@self_draw_test_title();
	dmd_draw_horiz_line ((U16 *)dmd_low_buffer, 25);
	sprintf(@self_test_short_names[@self_test_command]);
	font_render_string_left (&font_mono5, 0, 27, sprintf_buffer);
	dmd_show_low ();
}




void @self_test_thread (void)
{
	for (;;)
	{
		task_sleep (TIME_100MS);
		@self_test_draw ();
	}
}



void @self_test_up (void)
{
	if (@self_test_command < LAST_TEST)
		@self_test_command++;
}



void @self_test_down (void)
{
	if (@self_test_command > FIRST_TEST)
		@self_test_command--;
}


void @self_test_escape (void) {
	// stop everything
	@self_stop();
	window_pop();
}



void @self_test_enter (void)
{
	sound_send (SND_TEST_ENTER);
  	switch (@self_test_command)
  	{
  		case UP:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_move_up();
			@self_test_command = DOWN;
  		break;
  		case DOWN:
			dbprintf ("@self_test_enter: starting 'open'\n");
			@self_move_down();
			@self_test_command = STOP;
  		break;
  		case STOP:
			dbprintf ("@self_test_enter: starting 'close'\n");
			@self_stop();
			@self_test_command = UP;
  		break;
  	}
}



struct window_ops @self_test_window = {
	DEFAULT_WINDOW,
	.init = @self_test_init,
	.draw = @self_test_draw,
	.up = @self_test_up,
	.down = @self_test_down,
	.enter = @self_test_enter,
	.escape = @self_test_escape,
	.thread = @self_test_thread,
};



struct menu @self_test_item = {
	.name = "@SELF TEST", // needs @SELF for uppercase version of 'self' as test menu font doesn't have lower-case letters.
	.flags = M_ITEM,
	.var = { .subwindow = { &@self_test_window, NULL } },
};




